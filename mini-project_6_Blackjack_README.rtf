{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red11\green81\blue160;
\red210\green0\blue53;\red245\green245\blue247;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
{\info
{\author KJHg }}\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl840\sa210

\f0\b\fs40 \cf2 \cb3 Mini-project description - Blackjack\
\pard\pardeftab720\sl420\sa210

\b0\fs28 \cf2 Blackjack is a simple, popular card game that is played in many casinos. Cards in Blackjack have the following values: an ace may be valued as either 1 or 11 (player's choice), face cards (kings, queens and jacks) are valued at 10 and the value of the remaining cards corresponds to their number. During a round of Blackjack, the players plays against a dealer with the goal of building a hand (a collection of cards) whose cards have a total value that is higher than the value of the dealer's hand, but not over 21. \'a0(A round of Blackjack is also sometimes referred to as a hand.)\
\pard\pardeftab720\sl420
\cf2 The game logic for our 
\i simplified
\i0  version of Blackjack is as follows. The player and the dealer are each dealt two cards initially with one of the dealer's cards being dealt faced down (his 
\i hole
\i0  card). The player may then ask for the dealer to repeatedly "hit" his hand by dealing him another card. If, at any point, the value of the player's hand exceeds 21, the player is "busted" and loses immediately. At any point prior to busting, the player may "stand" and the dealer will then hit his hand until the value of his hand is 17 or more. (For the dealer, aces count as 11 unless it causes the dealer's hand to bust). If the dealer busts, the player wins. Otherwise, the player and dealer then compare the values of their hands and the hand with the higher value wins. 
\b The dealer wins ties in our version.
\fs32 \
\pard\pardeftab720\sl840\sa210
\cf2 Mini-project development process\
\pard\pardeftab720\sl420

\b0\fs28 \cf2 We suggest you develop your Blackjack game in two phases. The first phase will concentrate on implementing the basic logic of Blackjack while the second phase will focus on building a more full-featured version. In phase one, you will use buttons to control the game and print the state of the game to the console using print statements. In the second phase, you will replace the print statements by drawing images and text on the canvas and add some extra game logic.\
\pard\pardeftab720\sl420\sa210
\cf2 \
In phase one, we will provide testing templates for four of the steps. The templates are designed to check whether your class implementations work correctly. You should copy your class definition into the testing template and compare the console output generated by running the template with the provided output. If the output matches, it is likely that your implementation of the class is correct. 
\b DO NOT PROCEED TO THE NEXT STEP UNTIL YOUR CODE WORKS WITH THE PROVIDED TESTING TEMPLATE.
\b0 Debugging code that uses incorrectly implemented classes is extremely difficult. Avoid this problem by using our provided testing templates.\
\pard\pardeftab720\sl420\sa210

\b \cf2 Phase one
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls1\ilvl0\cf2 {\listtext	1.	}Download the {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-blackjack_template.py"}}{\fldrslt 
\b \cf4 program template}} for this mini-project and review the class definition for the 
\f1\fs24 \cf5 \cb6 Card
\f0\fs28 \cf2 \cb3  class. This class is already implemented so your task is to familiarize yourself with the code. Start by pasting the 
\f1\fs24 \cf5 \cb6 Card
\f0\fs28 \cf2 \cb3  class definition into the provided {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-card_template.py"}}{\fldrslt 
\b \cf4 testing template}} and verifying that our implementation works as expected.\
{\listtext	2.	}Implement the methods 
\f1\fs24 \cf5 \cb6 __init__, __str__, add_card
\f0\fs28 \cf2 \cb3  for the 
\f1\fs24 \cf5 \cb6 Hand
\f0\fs28 \cf2 \cb3  class. We suggest modeling a hand as a list of Card objects that are stored in a field in the Hand object. The 
\f1\fs24 \cf5 \cb6 __init__
\f0\fs28 \cf2 \cb3  method should initialize the Hand object to have an empty list of Card objects. The 
\f1\fs24 \cf5 \cb6 add_card
\f0\fs28 \cf2 \cb3  should append a Card object to this list of cards. The 
\f1\fs24 \cf5 \cb6 __str__
\f0\fs28 \cf2 \cb3  method should return a string representation of a Hand object in a human-readable form.\uc0\u8232 For help in implementing the 
\f1\fs24 \cf5 \cb6 __str__
\f0\fs28 \cf2 \cb3  method, refer back to {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#exercises_mouse_join_solution.py"}}{\fldrslt \cf4 the solution}} to question four in the Practice Exercises for week 5a. Remember to use the string method for Card objects to convert each card in the hand's list of cards into a string. (Don't convert a Card object into a string in 
\f1\fs24 \cf5 \cb6 add_card
\f0\fs28 \cf2 \cb3  to make your string method work.) Once you have implemented the 
\f1\fs24 \cf5 \cb6 Hand
\f0\fs28 \cf2 \cb3  class, test it using the provided {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-hand_template.py"}}{\fldrslt 
\b \cf4 testing template}}.\
{\listtext	3.	}Implement the methods for the 
\f1\fs24 \cf5 \cb6 Deck
\f0\fs28 \cf2 \cb3  class listed in the mini-project template. We suggest modeling a deck of cards as list of cards. You can generate this list using a pair of nested 
\f1\fs24 \cf5 \cb6 for
\f0\fs28 \cf2 \cb3  loops or a list comprehension. Remember to use the 
\f1\fs24 \cf5 \cb6 Card
\f0\fs28 \cf2 \cb3  initializer to create your cards. Use 
\f1\fs24 \cf5 \cb6 random.shuffle()
\f0\fs28 \cf2 \cb3  to shuffle this deck of cards. Once you have implemented the 
\f1\fs24 \cf5 \cb6 Deck
\f0\fs28 \cf2 \cb3  class, test your Deck class using the provided {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-deck_template.py"}}{\fldrslt 
\b \cf4 testing template}}. Remember that the deck is randomized after shuffling, so the output of the testing template should match the output in the comments in form but not in exact value.\
{\listtext	4.	}Implement the handler for a "Deal" button that shuffles the deck and deals the two cards to both the dealer and the player. The event handler 
\f1\fs24 \cf5 \cb6 deal
\f0\fs28 \cf2 \cb3  for this button should shuffle the deck (stored as a global variable), create new player and dealer hands (stored as global variables), and add two cards to each hand. To transfer a card from the deck to a hand, you should use the 
\f1\fs24 \cf5 \cb6 deal_card
\f0\fs28 \cf2 \cb3 method of the 
\f1\fs24 \cf5 \cb6 Deck
\f0\fs28 \cf2 \cb3  class and the 
\f1\fs24 \cf5 \cb6 add_card
\f0\fs28 \cf2 \cb3  method of 
\f1\fs24 \cf5 \cb6 Hand
\f0\fs28 \cf2 \cb3  class in combination. The resulting hands should be printed to the console with an appropriate message indicating which hand is which.\
{\listtext	5.	}Implement the 
\f1\fs24 \cf5 \cb6 get_value
\f0\fs28 \cf2 \cb3  method for the 
\f1\fs24 \cf5 \cb6 Hand
\f0\fs28 \cf2 \cb3  class. You should use the provided 
\f1\fs24 \cf5 \cb6 VALUE
\f0\fs28 \cf2 \cb3  dictionary to look up the value of a single card in conjunction with the logic explained in the video lecture for this project to compute the value of a hand. Once you have implemented the 
\f1\fs24 \cf5 \cb6 get_value
\f0\fs28 \cf2 \cb3  method, test it using the provided {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-getvalue_template.py"}}{\fldrslt 
\b \cf4 testing template
\b0  }}.\'a0\
{\listtext	6.	}Implement the handler for a "Hit" button. If the value of the hand is less than or equal to 21, clicking this button adds an extra card to player's hand. If the value exceeds 21 after being hit, print "You have busted".\
{\listtext	7.	}Implement the handler for a "Stand" button. If the player has busted, remind the player that they have busted. Otherwise, repeatedly hit the dealer until his hand has value 17 or more (using a while loop). If the dealer busts, let the player know. Otherwise, compare the value of the player's and dealer's hands. If the value of the player's hand is less than or equal to the dealer's hand, the dealer wins. Otherwise the player has won. 
\b Remember the dealer wins ties in our version.
\b0 \
\pard\pardeftab720\sl420\sa210
\cf2 In our version of Blackjack, a hand is automatically dealt to the player and dealer when the program starts. In particular, the program template includes a call to the 
\f1\fs24 \cf5 \cb6 deal()
\f0\fs28 \cf2 \cb3  function during initialization. At this point, we would suggest testing your implementation of Blackjack extensively.\
\pard\pardeftab720\sl420

\b \cf2 Phase two
\b0 \
\pard\pardeftab720\sl420\sa210
\cf2 In the second phase of your implementation, you will add five features. For those involving drawing with global variables, remember to initialize these variables to appropriate values (like creating empty hands for the player and dealer) just before starting the frame. \'a0\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls2\ilvl0\cf2 {\listtext	1.	}Implement your own 
\f1\fs24 \cf5 \cb6 draw
\f0\fs28 \cf2 \cb3  method for the 
\f1\fs24 \cf5 \cb6 Hand
\f0\fs28 \cf2 \cb3  class using the 
\f1\fs24 \cf5 \cb6 draw
\f0\fs28 \cf2 \cb3  method of the 
\f1\fs24 \cf5 \cb6 Card
\f0\fs28 \cf2 \cb3  class. We suggest drawing a hand as a horizontal sequence of cards where the parameter 
\f1\fs24 \cf5 \cb6 pos
\f0\fs28 \cf2 \cb3  is the position of the upper left corner of the leftmost card. To simplify your code, you may assume that only the first five cards of a player's hand need to be visible on the canvas.\
{\listtext	2.	}Replace printing in the console by drawing text messages on the canvas. We suggest adding a global 
\f1\fs24 \cf5 \cb6 outcome
\f0\fs28 \cf2 \cb3  string that is drawn in the draw handler using 
\f1\fs24 \cf5 \cb6 draw_text
\f0\fs28 \cf2 \cb3 . These messages should prompt the player to take some require action and have a form similar to "Hit or stand?" and "New deal?". Also, draw the title of the game, "Blackjack", somewhere on the canvas.\
{\listtext	3.	}Add logic using the global variable 
\f1\fs24 \cf5 \cb6 in_play
\f0\fs28 \cf2 \cb3  that keeps track of whether the player's hand is still being played. If the round is still in play, you should draw an image of the back of a card (provided in the template) over the dealer's first (hole) card to hide it. Once the round is over, the dealer's hole card should be displayed.\
{\listtext	4.	}Add a score counter that keeps track of wins and losses for your Blackjack session. In the simplest case (see our demo), the program displays wins minus losses. However, you are welcome to implement a more sophisticated betting/scoring system.\
{\listtext	5.	}Modify the logic for the "Deal" button to create and shuffle a new deck (or restock and shuffle an existing deck) each time the "Deal" button is clicked. This change avoids the situation where the deck becomes empty during play.\
{\listtext	6.	}Finally, modify the 
\f1\fs24 \cf5 \cb6 deal
\f0\fs28 \cf2 \cb3  function such that, if the "Deal" button is clicked during the middle of a round, the program reports that the player lost the round and updates the score appropriately.\
\pard\pardeftab720\sl420
\cf2 Congratulations! You have just built Blackjack. To wrap things up, please review the demo of our version of Blackjack in the Blackjack video lecture to ensure that your version has full functionality.\
\pard\pardeftab720\sl420\sa210
\cf2 For more helpful tips on implementing this mini-project, please visit the {\field{\*\fldinst{HYPERLINK "https://class.coursera.org/interactivepython2-002/wiki/blackjack_tips"}}{\fldrslt \cf4 Code Clinic tips}} page for this mini-project.\
}