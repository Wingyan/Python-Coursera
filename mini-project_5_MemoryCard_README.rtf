{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Monaco;\f2\fnil\fcharset0 STIXGeneral-Regular;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red11\green81\blue160;
\red210\green0\blue53;\red245\green245\blue247;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
{\info
{\author KJHg }}\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl420\sa210

\f0\fs28 \cf2 \cb3 Memory is a card game in which the player deals out a set of cards face down. In Memory, a 
\i turn
\i0  (or a move) consists of the player flipping over two cards. If they match, the player leaves them face up. If they don't match, the player flips the cards back face down. The goal of Memory is to end up with all of the cards flipped face up in the minimum number of turns. For this project, we will keep our model for Memory fairly simple. A Memory deck consists of eight pairs of matching cards.\
\pard\pardeftab720\sl840\sa210

\b\fs32 \cf2 Mini-project development process\
\pard\pardeftab720\sl420

\b0\fs28 \cf2 As usual, we suggest that you start from the {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-memory_template.py"}}{\fldrslt 
\b \cf4 program template}} for this mini-project.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420
\ls1\ilvl0\cf2 {\listtext	1.	}Model the deck of cards used in Memory as a list consisting of 16 numbers with each number lying in the range [0,8) and appearing twice. We suggest that you create this list by concatenating two list with range [0,8) together. Use the Docs to locate the list concatenation operator.\
{\listtext	2.	}Write a draw handler that iterates through the Memory deck using a 
\f1\fs24 \cf5 \cb6 for
\f0\fs28 \cf2 \cb3  loop and uses 
\f1\fs24 \cf5 \cb6 draw_text
\f0\fs28 \cf2 \cb3  to draw the number associated with each card on the canvas. The result should be a horizontal sequence of evenly-spaced numbers drawn on the canvas.\
{\listtext	3.	}Shuffle the deck using 
\f1\fs24 \cf5 \cb6 random.shuffle()
\f0\fs28 \cf2 \cb3 . Remember to debug your canvas drawing code before shuffling to make debugging easier.\
{\listtext	4.	}Next, modify the draw handler to either draw a blank green rectangle or the card's value. To implement this behavior, we suggest that you create a second list called 
\f1\fs24 \cf5 \cb6 exposed
\f0\fs28 \cf2 \cb3 . In the 
\f1\fs24 \cf5 \cb6 exposed
\f0\fs28 \cf2 \cb3  list, the 
\f2\i\fs34 \up0 i
\f0\i0 \up0 \uc0\u8232 
\f2\i\fs24 \up0 th
\f0\i0\fs34 \up0 \uc0\u8232 \u8232 
\fs28 \up0  entry should be 
\f1\fs24 \cf5 \cb6 True
\f0\fs28 \cf2 \cb3  if the 
\f2\i\fs34 \up0 i
\f0\i0 \up0 \uc0\u8232 
\f2\i\fs24 \up0 th
\f0\i0\fs34 \up0 \uc0\u8232 \u8232 
\fs28 \up0  card is face up and its value is visible or 
\f1\fs24 \cf5 \cb6 False
\f0\fs28 \cf2 \cb3  if the 
\f2\i\fs34 \up0 i
\f0\i0 \up0 \uc0\u8232 
\f2\i\fs24 \up0 th
\f0\i0\fs34 \up0 \uc0\u8232 \u8232 
\fs28 \up0  card is face down and it's value is hidden. We suggest that you initialize 
\f1\fs24 \cf5 \cb6 exposed
\f0\fs28 \cf2 \cb3  to some known values while testing your drawing code with this modification.\
{\listtext	5.	}Now, add functionality to determine which card you have clicked on with your mouse. Add an event handler for mouse clicks that takes the position of the mouse click and prints the index of the card that you have clicked on to the console. To make determining which card you have clicked on easy, we suggest sizing the canvas so that the sequence of cards entirely fills the canvas.\
{\listtext	6.	}Modify the event handler for mouse clicks to flip cards based on the location of the mouse click. If the player clicked on the 
\f1\fs24 \cf5 \cb6 i
\f0\fs28 \cf2 \cb3 th card, you can change the value of 
\f1\fs24 \cf5 \cb6 exposed[i]
\f0\fs28 \cf2 \cb3  from 
\f1\fs24 \cf5 \cb6 False
\f0\fs28 \cf2 \cb3  to 
\f1\fs24 \cf5 \cb6 True
\f0\fs28 \cf2 \cb3 . 
\b If the card is already exposed, you should ignore the mouseclick
\b0 . At this point, the basic infrastructure for Memory is done.\
{\listtext	7.	}You now need to add game logic to the mouse click handler for selecting two cards and determining if they match. We suggest following the game logic in the {\field{\*\fldinst{HYPERLINK "http://www.codeskulptor.org/#examples-memory_states.py"}}{\fldrslt 
\b \cf4 example code}} discussed in the Memory video. State 0 corresponds to the start of the game. In state 0, if you click on a card, that card is exposed, and you switch to state 1. State 1 corresponds to a single exposed unpaired card. In state 1, if you click on an unexposed card, that card is exposed and you switch to state 2. State 2 corresponds to the end of a turn. In state 2, if you click on an unexposed card, that card is exposed and you switch to state 1.\
{\listtext	8.	}Note that in state 2, you also have to determine if the previous two cards are paired or unpaired. If they are unpaired, you have to flip them back over so that they are hidden before moving to state 1. We suggest that you use two global variables to store the index of each of the two cards that were clicked in the previous turn.\
{\listtext	9.	}Add a counter that keeps track of the number of turns and uses 
\f1\fs24 \cf5 \cb6 set_text
\f0\fs28 \cf2 \cb3  to update this counter as a label in the control panel. (BTW, Joe's record is 12 turns.) \'a0This counter should be incremented after either the first or second card is flipped during a turn.\
{\listtext	10.	}Finally, implement the 
\f1\fs24 \cf5 \cb6 new_game()
\f0\fs28 \cf2 \cb3  function (if you have not already) so that the "Reset" button reshuffles the cards, resets the turn counter and restarts the game. All cards should start the game hidden.\
{\listtext	11.	}(Optional) You may replace the 
\f1\fs24 \cf5 \cb6 draw_text
\f0\fs28 \cf2 \cb3  for each card by a 
\f1\fs24 \cf5 \cb6 draw_image
\f0\fs28 \cf2 \cb3  that uses one of eight different images.\
\pard\pardeftab720\sl420
\cf2 Once the run button is clicked in CodeSkulptor, the game should start. You should not have to hit the "Reset" button to start. Once the game is over, you should hit the "Reset" button to restart the game. \
\pard\pardeftab720\sl420\sa210
\cf2 While this project may seem daunting at first glance, our full implementation took well under 100 lines with comments and spaces. If you feel a little bit intimidated, focus on developing your project to step six. Our experience is that, at this point, you will begin to see your game come together and the going will get much easier.\
}